import React, {Component} from 'react';
import  Carousel  from "react-bootstrap/Carousel";
import photo1 from '../images/photo1.jpg';
import photo3 from '../images/photo3.jpg';
import photo2 from '../images/photo2.jpg';

class CarouselBox extends Component {
    render() {
        return (
            <Carousel>
                <Carousel.Item className="text">
                    <img
                        width={500}
                        height={700}
                        className="d-block w-100"
                        src = {photo1}
                        alt="Forest"
                    />
                    <Carousel.Caption>
                        <h3>С чего всё начиналось, и кто его придумал:</h3>
                        <p className="text_1">
                            React был придуман одним из разработчиков Facebook, а именно Джорданом Валке, именно он и создал React и впервые использовал в новостной ленте Facebook в 2011 году, чуть позже данную технологию внедрили и в ленту Instagram.
                            В самом начале он был разработан как закрытая технология, только для разработчиков Facebook. Однако на одной из конференций в 2013 году, его код стал полностью открытым и React стал доступен каждому программисту.
                            Через два года уже была создана площадка React Native, которая позволяет создавать нативные мобильные приложения, на уже знакомом всем React.
                            Еще через два года компания Facebook объявила о создании React Fiber, которая должна стать более улучшенной и оптимизированной версией знакомого React, но уже на сегодняшний день платформа React Fiber существует и облегчает жизнь разработчикам.
                            Обратите внимание, что это именно библиотека, а не фреймворк. React часто называют фреймворком, но это ошибка. Во-первых, его использование ни к чему вас не обязывает, не формирует «фрейм» проекта. Во-вторых, React выполняет единственную задачу: показывает на странице компонент интерфейса, синхронизируя его с данными приложения, и только этой библиотеки в общем случае недостаточно для того, чтобы полностью реализовать проект.
                            Вскоре после появления React и подобные ему решения (Vue.js, Svelte) практически захватили мир фронтенда: потому что они помогают решать проблемы, основываясь на идее декларативного программирования, а не на императивном подходе.
                            Чтобы лучше понять, о чём идёт речь, рассмотрим императивный и декларативный подходы на примерах. Напишем две версии простого приложения: на HTML и JS (императивный подход) и на React (декларативный подход). Наша программа будет показывать число и кнопку, и при нажатии на неё исходное число будет увеличиваться на единицу.
                        </p>
                    </Carousel.Caption>
                </Carousel.Item>
                <Carousel.Item>
                    <img
                        width={500}
                        height={700}
                        className="d-block w-100"
                        src = {photo2}
                        alt="Forest"
                    />
                    <Carousel.Caption>
                        <h3>Особенности</h3>
                        <p className="text_2">
                            Однонаправленная передача данных
                            Свойства передаются от родительских компонентов к дочерним. Компоненты получают свойства как множество неизменяемых (англ. immutable) значений, поэтому компонент не может напрямую изменять свойства, но может вызывать изменения через callback-функции. Такой механизм называют «свойства вниз, события наверх».
                            Виртуальный DOM
                            React использует виртуальный DOM (англ. virtual DOM). React создаёт кэш-структуру в памяти, что позволяет вычислять разницу между предыдущим и текущим состояниями интерфейса для оптимального обновления DOM браузера. Таким образом программист может работать со страницей, считая, что она обновляется вся, но библиотека самостоятельно решает, какие компоненты страницы необходимо обновить.
                            JSX
                            JavaScript XML (JSX) — это расширение синтаксиса JavaScript, которое позволяет использовать HTML-подобный синтаксис для описания структуры интерфейса. Как правило, компоненты написаны с использованием JSX, но также есть возможность использования обычного JavaScript. JSX напоминает другой язык, созданный в компании Фейсбук для расширения PHP, XHP .
                            Методы жизненного цикла
                            Методы жизненного цикла позволяют разработчику запускать код на разных стадиях жизненного цикла компонента. Например:
                            shouldComponentUpdate — позволяет предотвратить перерисовку компонента с помощью возврата false, если перерисовка не нужна.
                            componentDidMount — вызывается после первой отрисовки компонента. Часто используется для запуска получения данных с удаленного источника через API.
                            render — важнейший метод жизненного цикла. Каждый компонент должен иметь этот метод. Обычно вызывается при изменении данных компонента для перерисовки данных в интерфейсе.
                            Не только отрисовка HTML в браузере
                            React используется не только для отрисовки HTML в браузере. Например, Facebook имеет динамические графики, которые отрисовываются в теги "canvas". Netflix и PayPal используют изоморфные загрузки для отрисовки идентичного HTML на сервере и клиенте.
                            React Hooks
                            Хуки позволяют использовать состояние и другие возможности React без написания классов.
                            Построение пользовательских хуков позволяет помещать логику компонента в повторно используемые функции.
                        </p>
                    </Carousel.Caption>
                </Carousel.Item>
                <Carousel.Item>
                    <img
                        width={500}
                        height={700}
                        className="d-block w-100"
                        src = {photo3}
                        alt="Forest"
                    />
                    <Carousel.Caption>
                        <h3>React сегодня и его преимущества</h3>
                        <p className="text_3">
                            Преимущества React:
                            Специалистами из Facebook была разработана технология Virtual DOM, которая позволила делать рендеринг незаметным для пользователя. Еще одним ценным свойством React стала изоморфность, которая, позволила выполнять один и тот же код как на клиенте, так и на сервере, что решило проблемы серверного рендеринга.
                            Компонентный подход упростил поддержку, тестирование и переносимость кода. React приобрел огромную популярность, появилось много вспомогательных библиотек, большое и открытое комьюнити. Благодаря всему этому React стал одним из лидеров на рынке SPA библиотек, активно развивающейся и востребованной технологией и является одним из лучших решений для создания веб приложений.
                            React сегодня:
                            Сейчас любой разработчик скажет, что на данный момент фреймворк React расцветает как никогда. У него с каждым днём появляются новые поклонники, а в сети новый материал, связанный с ним.
                            Благодаря своей популярности React используется сейчас почти на любом сайте, и он также активно захватывает и рынок разработки мобильных приложений.
                            Вместе с этим огромное сообщество разработчиков помогает в разработке React, независимые программисты со всего света самостоятельно исправляют баги и ошибки, создают на его основе библиотеки.
                            А также в сети с каждым днём появляются всё новые уроки и туториалы. А в такой обстановке приятно работать и учиться.
                            А React всего за 8 лет прошёл путь от частного фреймворка Facebook, до всемирно известного и всеми любимого, без которого трудно представить современные IT.
                            В заключение скажу, что история React.js интересная, и его обязательно стоит изучать, да и популярный он будет ещё долго.
                            Приложение на React
                            Из-за специфики библиотеки код на React может выглядеть непривычно для того, кто пишет на JavaScript: потому что в тэге "body" практически нет вёрстки. Но сосредоточимся непосредственно на приложении-счётчике: его основная логика находится на строках 25-40.
                            Весь код находится внутри функции App. В React она и другие похожие функции называются компонентами. Компонент — это фрагмент интерфейса, который содержит разметку и, при необходимости, связанную с ней логику. Все React-приложения строятся на компонентах. При этом сам компонентный подход появился задолго до React, но здесь его совместили с декларативностью.
                        </p>
                    </Carousel.Caption>
                </Carousel.Item>
            </Carousel>
        );
    }
}

export default CarouselBox;